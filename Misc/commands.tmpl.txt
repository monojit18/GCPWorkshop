# Organizations
=====================
gcloud organizations list

====================================================================================================

# Folders
=====================
gcloud resource-manager folders create --display-name=infrastructure --organization=
gcloud resource-manager folders create --display-name=services --organization=
gcloud resource-manager folders list --organization=

====================================================================================================
BASEFOLDERPATH=""
PROJECT_HUB="cloud-native-hub"
GSA_HUB="infrastructure-hub-sa@${PROJECT_HUB}.iam.gserviceaccount.com"

PROJECT_SPOKE="cloud-native-spoke"
GSA_SPOKE="infrastructure-spoke-sa@${PROJECT_SPOKE}.iam.gserviceaccount.com"

PROJECT_APPS="cloud-native-services-apps"
GSA_APPS="services-apps-sa@${PROJECT_APPS}.iam.gserviceaccount.com"

PROJECT_DBS="cloud-native-services-dbs"
GSA_DBS="services-dbs-sa@${PROJECT_DBS}.iam.gserviceaccount.com"
====================================================================================================

# Projects
=====================
gcloud config get project

gcloud projects create $PROJECT_HUB --folder=
gcloud config set project $PROJECT_HUB
gcloud beta billing projects link $PROJECT_HUB --billing-account=
gcloud services enable compute.googleapis.com
gcloud config set compute/region asia-southeast1
gcloud config set compute/zone asia-southeast1-b

gcloud projects create $PROJECT_SPOKE --folder=
gcloud config set project $PROJECT_SPOKE
gcloud beta billing projects link $PROJECT_SPOKE --billing-account=
gcloud services enable compute.googleapis.com
gcloud config set compute/region asia-southeast1
gcloud config set compute/zone asia-southeast1-b

gcloud projects create $PROJECT_APPS --folder=
gcloud config set project $PROJECT_APPS
gcloud beta billing projects link $PROJECT_APPS --billing-account=
gcloud services enable compute.googleapis.com
gcloud config set compute/region asia-southeast1
gcloud config set compute/zone asia-southeast1-b

gcloud projects create $PROJECT_DBS --folder=
gcloud config set project $PROJECT_DBS
gcloud beta billing projects link $PROJECT_DBS --billing-account=
gcloud services enable compute.googleapis.com
gcloud config set compute/region asia-southeast1
gcloud config set compute/zone asia-southeast1-b


# Service Accounts
=========================

gcloud config set project $PROJECT_HUB
gcloud iam service-accounts create infrastructure-hub-sa --display-name "SA for All Hub Infratsructure"
gcloud iam service-accounts list
gcloud iam service-accounts keys \
create "${BASEFOLDERPATH}/Misc/infrastructure-hub-sa.json" \
--iam-account=$GSA_HUB

gcloud projects add-iam-policy-binding $PROJECT_HUB --role="roles/owner" \
--member="serviceAccount:${GSA_HUB}"

=========================
gcloud config set project $PROJECT_SPOKE
gcloud iam service-accounts create infrastructure-spoke-sa --display-name "SA for All Spoke Infratsructure"
gcloud iam service-accounts list

gcloud iam service-accounts keys \
create "${BASEFOLDERPATH}/Misc/infrastructure-spoke-sa.json" \
--iam-account=$GSA_SPOKE

gcloud projects add-iam-policy-binding $PROJECT_SPOKE --role="roles/owner" \
--member="serviceAccount:${GSA_SPOKE}"

gcloud projects add-iam-policy-binding $PROJECT_HUB --role="roles/viewer" \
--member="serviceAccount:${GSA_SPOKE}"

=========================
gcloud config set project $PROJECT_APPS
gcloud iam service-accounts create services-apps-sa --display-name "SA for All App Services"
gcloud iam service-accounts list

gcloud iam service-accounts keys \
create "${BASEFOLDERPATH}/Misc/services-apps-sa.json" \
--iam-account=$GSA_APPS

gcloud projects add-iam-policy-binding $PROJECT_APPS --role="roles/owner" \
--member="serviceAccount:${GSA_APPS}"

=========================
gcloud config set project $PROJECT_DBS
gcloud iam service-accounts create services-dbs-sa --display-name "SA for All App Services"
gcloud iam service-accounts list

gcloud iam service-accounts keys \
create "${BASEFOLDERPATH}/Misc/services-dbs-sa.json" \
--iam-account=$GSA_DBS

gcloud projects add-iam-policy-binding $PROJECT_DBS --role="roles/owner" \
--member="serviceAccount:${GSA_DBS}"

====================================================================================================

# GKE Setup
====================================================================================================
## Hub Resources
=========================
gcloud auth activate-service-account $GSA_HUB \
--key-file="${BASEFOLDERPATH}/Misc/infrastructure-hub-sa.json"
gcloud config set project $PROJECT_HUB

gcloud compute networks create hub-vpc --project=$PROJECT_HUB --subnet-mode=custom --mtu=1460 \
--bgp-routing-mode=regional
# gcloud compute networks delete hub-vpc

gcloud compute firewall-rules create allow-ssh-rule --network hub-vpc --allow tcp:22 --source-ranges=0.0.0.0/0
# gcloud compute firewall-rules delete allow-ssh-rule

gcloud compute networks subnets create jump-server-subnet --network=hub-vpc --range=11.0.0.0/24
# gcloud compute networks subnets delete jump-server-subnet

### Jumper VM
===============
gcloud compute instances create jumper-server --image-family=debian-10 --image-project=debian-cloud \
--network=hub-vpc --subnet=jump-server-subnet --zone=asia-southeast1-b --project=$PROJECT_HUB
# gcloud compute instances delete jumper-server --zone=asia-southeast1-b --project=$PROJECT_HUB

gcloud compute instances describe jumper-server --format="get(networkInterfaces[0].networkIP)" \
--project=$PROJECT_HUB
gcloud compute instances describe jumper-server --format="get(networkInterfaces[0].accessConfigs[0].natIP)" \
--project=$PROJECT_HUB

gcloud compute ssh --zone asia-southeast1-b jumper-server --project=$PROJECT_HUB

### Hub-n-Spoke Peering
==============================
gcloud auth activate-service-account $GSA_HUB \
--key-file="${BASEFOLDERPATH}/Misc/infrastructure-hub-sa.json"
gcloud config set project $PROJECT_HUB

gcloud compute networks peerings create hub-spoke-peer --network=hub-vpc --peer-network=spoke-vpc \
--peer-project=$PROJECT_SPOKE --import-subnet-routes-with-public-ip
# gcloud compute networks peerings delete hub-spoke-peer --network=hub-vpc

gcloud auth activate-service-account $GSA_SPOKE \
--key-file="${BASEFOLDERPATH}/Misc/infrastructure-spoke-sa.json"
gcloud config set project $PROJECT_SPOKE

gcloud compute networks peerings create spoke-hub-peer --network=spoke-vpc \
--peer-network=hub-vpc --peer-project=$PROJECT_HUB --import-subnet-routes-with-public-ip
# gcloud compute networks peerings delete hub-spoke-peer --network=hub-vpc

## Spoke Resources
=========================
gcloud auth activate-service-account $GSA_SPOKE \
--key-file="${BASEFOLDERPATH}/Misc/infrastructure-spoke-sa.json"
gcloud config set project $PROJECT_SPOKE

gcloud compute networks create spoke-vpc --project=$PROJECT_SPOKE --subnet-mode=custom --mtu=1460 \
--bgp-routing-mode=regional
# gcloud compute networks delete spoke-vpc

gcloud compute firewall-rules create allow-ssh-spoke-rule --network spoke-vpc --allow tcp:22 --source-ranges=0.0.0.0/0
# gcloud compute firewall-rules delete allow-ssh-spoke-rule

gcloud compute networks subnets create gke-cluster-subnet --network=spoke-vpc --range=12.0.0.0/22
# gcloud compute networks subnets delete gke-cluster-subnet

gcloud compute networks subnets create gke-proxy-only-subnet --purpose=REGIONAL_MANAGED_PROXY --role=ACTIVE \
--network=spoke-vpc --range=12.0.4.0/24
# gcloud compute networks subnets delete gke-proxy-only-subnet

gcloud compute networks subnets create gke-psc-subnet --purpose=PRIVATE_SERVICE_CONNECT --role=ACTIVE \
--network=spoke-vpc --range=12.0.5.0/24
# gcloud compute networks subnets delete gke-psc-subnet

gcloud compute networks subnets update gke-cluster-subnet \
--add-secondary-ranges=pods-range=12.1.0.0/16,services-range=12.2.0.0/16
# gcloud compute networks subnets delete gke-cluster-subnet

gcloud compute firewall-rules create allow-spoke-health-check --network=spoke-vpc \
--action=allow --direction=ingress --source-ranges=130.211.0.0/22,35.191.0.0/16 --rules=tcp
# gcloud compute firewall-rules delete allow-spoke-health-check

gcloud compute firewall-rules create allow-spoke-proxies --network=spoke-vpc \
--action=allow --direction=ingress --source-ranges=12.0.4.0/24 --rules=tcp:80,tcp:443,tcp:8080
# gcloud compute firewall-rules delete allow-spoke-proxies

gcloud compute firewall-rules create allow-spoke-internal --network=spoke-vpc \
--action=allow --direction=ingress --source-ranges=12.0.6.0/28 --rules=tcp:80,tcp:443,tcp:8443,tcp:8080
# gcloud compute firewall-rules delete allow-spoke-internal

JUMPSERERIP="35.247.159.19"

gcloud container clusters create gke-private-cluster --release-channel=regular \
--region=asia-southeast1 --num-nodes=1 --enable-ip-alias \
--enable-master-authorized-networks --network=spoke-vpc --subnetwork=gke-cluster-subnet \
--cluster-secondary-range-name=pods-range --services-secondary-range-name=services-range \
--enable-master-authorized-networks --enable-private-nodes \
--service-account=$GSA_SPOKE \
--master-authorized-networks=$JUMPSERERIP/32 --master-ipv4-cidr=12.0.6.0/28
# gcloud container clusters delete gke-private-cluster --region=asia-southeast1

gcloud compute addresses create asia-southeast1-nat-ip --region=asia-southeast1
# gcloud compute addresses delete asia-southeast1-nat-ip --region=asia-southeast1

gcloud compute routers create rtr-asia-southeast1 --network=spoke-vpc --region=asia-southeast1
# gcloud compute routers delete rtr-asia-southeast1 --region=asia-southeast1

gcloud compute routers nats create nat-gw-asia-southeast1 --router=rtr-asia-southeast1 --region=asia-southeast1 \
--nat-external-ip-pool=asia-southeast1-nat-ip \
--nat-all-subnet-ip-ranges --enable-logging
# gcloud compute routers nats delete nat-gw-asia-southeast1 --router=rtr-asia-southeast1 --region=asia-southeast1

## Access from Jump Server VM
================================
gcloud container clusters update gke-private-cluster --enable-master-authorized-networks \
--master-authorized-networks=$JUMPSERERIP/32 --region=asia-southeast1

gcloud compute ssh --zone asia-southeast1-b jumper-server --project=$PROJECT_HUB
sudo apt-get install snapd
sudo snap install core
sudo snap install kubectl --classic
sudo snap install helm --classic
sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin

gcloud auth list
gcloud auth activate-service-account $GSA_HUB \
--key-file="./infrastructure-hub-sa.json"
gcloud config set project $PROJECT_HUB

gcloud config set account gcpwkshp@gcp<dns-name>

gcloud projects add-iam-policy-binding $PROJECT_SPOKE \
--member="serviceAccount:$GSA_HUB" \
--role="roles/container.admin"

gcloud config set account $GSA_HUB

vi ~/.bashrc
source ~/.bashrc

gcloud container clusters get-credentials gke-private-cluster --region asia-southeast1 --project=$PROJECT_SPOKE


### Deploy Applications
=========================
k create deployment hello-app --image=gcr.io/google-samples/hello-app:1.0
k expose deployment hello-app --port=8080 --target-port=8080

k create deploy nginx-deploy --image=nginx
k expose deploy/nginx-deploy --name nginx-svc --type=ClusterIP --port=80

helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress-ns --create-namespace
# helm uninstall nginx-ingress -n nginx-ingress-ns

#### Public LB
=================
cat <<EOF > ingress-nginx-public.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-resource
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  rules:
  - host: "34.87.26.252.nip.io"
    http:
      paths:
      - pathType: Prefix
        path: /nginx
        backend:
          service:
            name: nginx-svc
            port:
              number: 80
      - pathType: Prefix
        path: /hello
        backend:
          service:
            name: hello-app
            port:
              number: 8080
EOF

k apply -f ./ingress-nginx-public.yaml
#k delete -f ./ingress-nginx-public.yaml 

#### Private+Public LB
========================
cat <<EOF > ingress-config.yaml
controller:
  service:
    internal:
      enabled: true
      annotations:        
        cloud.google.com/load-balancer-type: "Internal"        
EOF

#### Private LB
=================
cat <<EOF > internal-ingress-config.yaml
controller:
  service:
      # type: ClusterIP
      loadBalancerIP: 12.0.0.100
      annotations:        
        cloud.google.com/load-balancer-type: "Internal"
        # cloud.google.com/neg: '{"exposed_ports": {"80":{"name": "ingress-nginx-80-neg"}}}'
EOF

# helm install -f internal-ingress-config.yaml nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress-ns --create-namespace
helm install -f internal-ingress-config.yaml nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress-ns
# helm uninstall nginx-ingress -n nginx-ingress-ns

cat <<EOF > ingress-nginx-internal.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-resource
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"    
spec:
  rules:
  - host: "gkeapps.<dns-internal-name>"
    http:
      paths:
      - pathType: Prefix
        path: /nginx
        backend:
          service:
            name: nginx-svc
            port:
              number: 80
      - pathType: Prefix
        path: /hello
        backend:
          service:
            name: hello-app
            port:
              number: 8080
EOF

k apply -f ./ingress-nginx-internal.yaml
#k delete -f ./ingress-nginx-internal.yaml
====================================================================================================

## Private Cloud DNS Zone
==========================
gcloud dns managed-zones create $PROJECT_SPOKE-zone --dns-name <dns-internal-name>. --visibility=private --networks=spoke-vpc \
--description="Private Zone"
# gcloud dns managed-zones delete $PROJECT_SPOKE-zone

gcloud dns record-sets create gkeapps.<dns-internal-name>. --rrdatas=12.0.0.100 --type=A --ttl=60 --zone=$PROJECT_SPOKE-zone
# gcloud dns record-sets delete gkeapps.<dns-internal-name> --type=A --zone=$PROJECT_SPOKE-zone

gcloud dns record-sets create gkeapps-dev.<dns-internal-name>. --rrdatas=12.0.0.100 --type=A --ttl=60 --zone=$PROJECT_SPOKE-zone
# gcloud dns record-sets delete gkeapps-dev.<dns-internal-name> --type=A --zone=$PROJECT_SPOKE-zone

gcloud projects add-iam-policy-binding $PROJECT_HUB \
--member=serviceAccount:$GSA_HUB --role=roles/dns.admin

gcloud projects add-iam-policy-binding $PROJECT_SPOKE \
--member=serviceAccount:$GSA_HUB --role=roles/dns.peer

gcloud dns managed-zones create hub-spoke-dns-peer \
  --description="DNS Peering Hub to Spoke" \
  --dns-name=internal.hub.com \
  --networks=hub-vpc \
  --account=$GSA_HUB \
  --target-network=spoke-vpc \
  --target-project=$PROJECT_SPOKE \
  --visibility=private
# gcloud dns managed-zones delete hub-spoke-dns-peer --networks=hub-vpc

====================================================================================================

# SSL Certificates
=====================
/*
  gcloud projects create cloud-native-creds-project
  gcloud iam service-account create cloud-native-creds-sa --display-name="SA for Certbot"

  gcloud iam service-accounts keys create \
  "/Users/monojitd/Workloads/Development/Projects/GithubProjects/Workshops/GCP-Workshop/Misc/cloud-native-creds-sa.json" \
  --iam-account=cloud-native-creds-sa@cloud-native-creds-project.iam.gserviceaccount.com

  certbot certonly --dns-google -d example.com
*/

gcloud compute ssl-certificates create cloud-lb-cert --certificate=fullchain.pem --private-key=privkey.pem

Global Https LB to GKE (through Private Service Connect) (Not working)
=======================================================================
/*
gcloud compute service-attachments create gke-ingress-attachment --region=asia-southeast1 \
--producer-forwarding-rule=ac645e987c025434c825aff75ea216d5 --connection-preference=ACCEPT_AUTOMATIC \
--nat-subnets=gke-psc-subnet
# gcloud compute service-attachments delete gke-ingress-attachment

gcloud compute network-endpoint-groups create gke-glb-neg \
  --network-endpoint-type=private-service-connect \
  --psc-target-service=$(gcloud beta compute service-attachments describe gke-ingress-attachment --region=asia-southeast1 \
  --format="get(selfLink)") \
   --network=spoke-vpc \
  --subnet=gke-psc-subnet \
  --region=asia-southeast1
# gcloud compute network-endpoint-groups delete gke-glb-neg --region=asia-southeast1

gcloud compute addresses create gke-glb-address --ip-version=IPV4 --global
gcloud compute addresses describe gke-glb-address --format="get(address)" --global
# gcloud compute addresses delete gke-glb-address --global

gcloud compute backend-services create gke-glb-backend --load-balancing-scheme=EXTERNAL_MANAGED --protocol=HTTP --global
# gcloud compute backend-services delete gke-glb-backend --global

gcloud compute backend-services add-backend gke-glb-backend \
  --network-endpoint-group=gke-glb-neg --network-endpoint-group-region=asia-southeast1 --global

gcloud compute url-maps create gke-glb-map --default-service=gke-glb-backend --global
gcloud compute url-maps describe gke-glb-map --format=yaml
gcloud compute url-maps import gke-glb-map --source=./gke-glb-map.yaml --global
# gcloud compute url-maps delete gke-glb-map --global

gcloud compute target-https-proxies create gke-glb-https-proxy --url-map=gke-glb-map --ssl-certificates=cloud-lb-cert --global
# gcloud compute target-https-proxies delete gke-glb-https-proxy --global

gcloud compute target-http-proxies create gke-glb-http-proxy --url-map=gke-glb-map --global
# gcloud compute target-http-proxies delete gke-glb-http-proxy --global

gcloud compute forwarding-rules create gke-fr-glb-endpoint \
  --load-balancing-scheme=EXTERNAL_MANAGED \
  --network-tier=PREMIUM \
  --address=gke-glb-address \
  --target-https-proxy=gke-glb-https-proxy \
  --ports=443 --global
# gcloud compute forwarding-rules delete gke-fr-glb-endpoint --global
*/
==========================================================================================================================================

Apigee X
===============

gcloud auth activate-service-account --key-file="./infrastructure-spoke-sa.json"

AUTH="Authorization: Bearer $(gcloud auth print-access-token)"
PROJECT_ID="$PROJECT_SPOKE"
RUNTIME_LOCATION="asia-southeast1"
ANALYTICS_REGION="asia-southeast1"

echo $AUTH
echo $PROJECT_ID
echo $RUNTIME_LOCATION
echo $ANALYTICS_REGION

gcloud compute networks subnets create gke-apigee-subnet --network=spoke-vpc --range=12.0.8.0/22
# gcloud compute networks subnets delete gke-apigee-subnet

gcloud compute networks subnets create gke-apigee-troublesdhoot-subnet --network=spoke-vpc --range=12.0.12.0/28
# gcloud compute networks subnets delete gke-apigee-troublesdhoot-subnet

gcloud services enable apigee.googleapis.com \
servicenetworking.googleapis.com compute.googleapis.com cloudkms.googleapis.com --project=$PROJECT_ID

APIGEE_RANGE_NAME=apigeex-svcs
APIGEE_MANAGED_RANGE_NAME=apigeex-managed-svcs
NETWORK_NAME=spoke-vpc

gcloud compute addresses create $APIGEE_RANGE_NAME \
  --global \
  --prefix-length=22 \
  --network=$NETWORK_NAME --purpose=VPC_PEERING --project=$PROJECT_ID
# gcloud compute addresses delete $APIGEE_RANGE_NAME --global

gcloud compute addresses create $APIGEE_MANAGED_RANGE_NAME \
  --global \
  --prefix-length=28 \
  --network=$NETWORK_NAME --purpose=VPC_PEERING --project=$PROJECT_ID
# gcloud compute addresses delete $APIGEE_MANAGED_RANGE_NAME --global

gcloud services vpc-peerings connect \
  --service=servicenetworking.googleapis.com \
  --network=$NETWORK_NAME --ranges=$APIGEE_RANGE_NAME,$APIGEE_MANAGED_RANGE_NAME --project=$PROJECT_ID
# gcloud services vpc-peerings delete servicenetworking-googleapis-com --network=$NETWORK_NAME

gcloud alpha apigee organizations provision \
  --runtime-location=$RUNTIME_LOCATION \
  --analytics-region=$ANALYTICS_REGION \
  --authorized-network=$NETWORK_NAME --project=$PROJECT_ID
# gcloud alpha apigee organizations delete $PROJECT_SPOKE

gcloud services peered-dns-domains create gke-internal-dns --network=spoke-vpc --service="servicenetworking.googleapis.com" \
--dns-suffix=<dns-internal-name>.

Access from Jumper VM in Spoke
================================
gcloud compute instances create gke-jumper-client --image-family=debian-10 --image-project=debian-cloud --tags=allow-ssh \
--network=spoke-vpc --subnet=gke-cluster-subnet --zone=asia-southeast1-b
# gcloud compute instances delete gke-jumper-client --zone=asia-southeast1-b

gcloud compute ssh --zone asia-southeast1-b gke-jumper-client --project=$PROJECT_SPOKE

gcloud auth activate-service-account --key-file="./infrastructure-spoke-sa.json"

sudo apt-get update -y
sudo apt-get install -y jq

AUTH="Authorization: Bearer $(gcloud auth print-access-token)"
PROJECT_ID=$PROJECT_SPOKE
ENV_GROUP_HOSTNAME=$(curl -H "$AUTH" https://apigee.googleapis.com/v1/organizations/$PROJECT_ID/envgroups -s | jq -r '.environmentGroups[0].hostnames[0]')
INTERNAL_LOAD_BALANCER_IP=$(curl -H "$AUTH" https://apigee.googleapis.com/v1/organizations/$PROJECT_ID/instances -s | jq -r '.instances[0].host')

echo $AUTH
echo $PROJECT_ID
echo $ENV_GROUP_HOSTNAME
echo $INTERNAL_LOAD_BALANCER_IP

curl -i -k -H "Host: $ENV_GROUP_HOSTNAME" https://$INTERNAL_LOAD_BALANCER_IP/hello-world
==================================================================================================

Global Https LB to Apigee (External Routing)
==============================================
NEG_NAME="apigee-lb-neg"
TARGET_SERVICE="projects/nc79b28590d2f500bp-tp/regions/asia-southeast1/serviceAttachments/apigee-asia-southeast1-mfby"
RUNTIME_LOCATION="asia-southeast1"
ANALYTICS_REGION="asia-southeast1"
NETWORK_NAME="spoke-vpc"
SUBNET_NAME="gke-psc-subnet"
PROJECT_ID="$PROJECT_SPOKE"
ADDRESS_NAME="apigee-lb-address"
BACKEND_SERVICE_NAME="apigee-bkend-service"
URL_MAP_NAME="apigee-bkend-url-map"
PROXY_NAME="apigee-bkend-proxy"
FWD_RULE="apigee-fwd-rule"
CERTIFICATE="cloud-lb-cert"

gcloud compute network-endpoint-groups create $NEG_NAME \
  --network-endpoint-type=private-service-connect \
  --psc-target-service=$TARGET_SERVICE \
  --region=$RUNTIME_LOCATION \
  --network=$NETWORK_NAME \
  --subnet=$SUBNET_NAME \
  --project=$PROJECT_ID
# gcloud compute network-endpoint-groups delete $NEG_NAME --region=$RUNTIME_LOCATION

gcloud compute addresses create $ADDRESS_NAME --ip-version=IPV4 --global --project=$PROJECT_ID
# gcloud compute addresses delete $ADDRESS_NAME --global

gcloud compute addresses describe $ADDRESS_NAME --format="get(address)" --global --project=$PROJECT_ID

gcloud compute backend-services create $BACKEND_SERVICE_NAME \
  --load-balancing-scheme=EXTERNAL_MANAGED \
  --protocol=HTTPS \
  --global --project=$PROJECT_ID
# gcloud compute backend-services delete $BACKEND_SERVICE_NAME --global

gcloud compute backend-services add-backend $BACKEND_SERVICE_NAME \
  --network-endpoint-group=$NEG_NAME \
  --network-endpoint-group-region=$RUNTIME_LOCATION \
  --global --project=$PROJECT_ID

gcloud compute url-maps create $URL_MAP_NAME \
  --default-service=$BACKEND_SERVICE_NAME \
  --global --project=$PROJECT_ID
# gcloud compute url-maps delete $URL_MAP_NAME --global

gcloud compute ssl-certificates describe $CERTIFICATE \
   --global \
   --format="get(name,managed.status, managed.Status)"

gcloud compute target-https-proxies create $PROXY_NAME \
  --url-map=$URL_MAP_NAME \
  --ssl-certificates=$CERTIFICATE --project=$PROJECT_ID
# gcloud compute target-https-proxies delete $PROXY_NAME --global

gcloud compute forwarding-rules create $FWD_RULE \
  --load-balancing-scheme=EXTERNAL_MANAGED \
  --network-tier=PREMIUM \
  --address=$ADDRESS_NAME \
  --target-https-proxy=$PROXY_NAME \
  --ports=443 \
  --global --project=$PROJECT_ID
# gcloud compute forwarding-rules delete $FWD_RULE --global

curl "https://apigee.googleapis.com/v1/organizations/$PROJECT_ID/envgroups/eval-group" \
  -H "$AUTH" \
  -X PATCH \
  -H "Content-Type:application/json" \
  -d '{
    "hostnames":["'apigext.gcp<dns-name>'"]
  }'

curl -H "$AUTH" \
  "https://apigee.googleapis.com/v1/organizations/$PROJECT_ID/envgroups/eval-group/attachments"

curl -i -H "$AUTH" \
  "https://apigee.googleapis.com/v1/organizations/$PROJECT_ID/environments/eval/apis/nginx-app/revisions/4/deployments"

curl -i -k https://gke-external.gcp<dns-name>/hello-world

==================================================================================================

## Global Https LB to GKE Ingress (Not Working)
=================================================
/*
  gcloud compute health-checks create http app-service-80-health-check \
    --request-path / --port 80 --check-interval 60 --unhealthy-threshold 3 --healthy-threshold 1 --timeout 5
  # gcloud compute health-checks delete app-service-80-health-check

  gcloud beta compute backend-services create gke-glb-backend --load-balancing-scheme=EXTERNAL_MANAGED --protocol=HTTPS \
  --health-checks app-service-80-health-check --global
  # gcloud beta compute backend-services delete gke-glb-backend --global

  gcloud beta compute backend-services add-backend gke-glb-backend \
    --network-endpoint-group=ingress-nginx-80-neg --network-endpoint-group-zone=asia-southeast1-c \
    --balancing-mode=RATE --capacity-scaler=1.0 --max-rate-per-endpoint=1.0 --global

  gcloud beta compute url-maps create gke-glb-map --default-service=gke-glb-backend --global
  gcloud beta compute url-maps describe gke-glb-map --format=yaml
  # gcloud beta compute url-maps delete gke-glb-map --global

  gcloud beta compute target-https-proxies create gke-glb-https-proxy --url-map=gke-glb-map \
  --ssl-certificates=cloud-lb-cert --global
  # gcloud beta compute target-https-proxies delete gke-glb-https-proxy --global

  gcloud compute addresses create gke-glb-address --ip-version=IPV4 --global
  gcloud compute addresses describe gke-glb-address --format="get(address)" --global
  # gcloud compute addresses delete gke-glb-address --global

  gcloud beta compute forwarding-rules create gke-fr-glb-endpoint \
    --load-balancing-scheme=EXTERNAL_MANAGED \
    --network-tier=PREMIUM \
    --address=gke-glb-address \
    --target-https-proxy=gke-glb-https-proxy \
    --ports=443 --global
  # gcloud beta compute forwarding-rules delete gke-fr-glb-endpoint --global

  curl -k https://gkeapps.<dns-name>/
*/

====================================================================================================

GKE Public Cluster
====================================================================================================
#gcloud compute instances delete jumper-server --zone=asia-southeast1-b --project=$PROJECT_HUB
PROJECT="$PROJECT_SPOKE"
REGION="asia-southeast1"
CLUSTER="gke-public-cluster"
GSA="$GSA_SPOKE"

gcloud container clusters create $CLUSTER --release-channel=regular --region=$REGION \
--enable-ip-alias --enable-autoscaling \
--num-nodes=1 --min-nodes=1 --max-nodes=3 --max-pods-per-node=40 \
--network=spoke-vpc --subnetwork=gke-cluster-subnet \
--cluster-secondary-range-name=pods-range --services-secondary-range-name=services-range \
--service-account=$GSA
#gcloud container clusters delete $CLUSTER --region=$REGION

gcloud container clusters update $CLUSTER --region=$REGION --workload-pool=$PROJECT.svc.id.goog

gcloud container node-pools create gkeappspool --cluster=$CLUSTER \
--region=$REGION --num-nodes=1 --enable-autoscaling \
--max-nodes=1 --max-pods-per-node=30
#gcloud container node-pools delete gkeappspool --cluster=$CLUSTER --region=$REGION

gcloud container clusters get-credentials $CLUSTER --region=$REGION --project=$PROJECT

## Public LB
=================
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

# helm install nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress-ns --create-namespace
helm install nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress-ns
# helm uninstall nginx-ingress -n nginx-ingress-ns

## Private LB
=================
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

# helm install -f internal-ingress-config.yaml nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress-ns --create-namespace
helm install -f internal-ingress-config.yaml nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress-ns
# helm uninstall nginx-ingress -n nginx-ingress-ns

## Deploy microservices
=========================
go install github.com/google/go-containerregistry/cmd/gcrane@latest

gcrane cp gcr.io/google-samples/microservices-demo/adservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/adservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/cartservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/cartservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/checkoutservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/checkoutservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/currencyservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/currencyservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/emailservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/emailservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/frontend:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/frontend:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/loadgenerator:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/loadgenerator:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/paymentservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/paymentservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/productcatalogservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/productcatalogservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/recommendationservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/recommendationservice:v0.3.6

gcrane cp gcr.io/google-samples/microservices-demo/shippingservice:v0.3.6 \
asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/shippingservice:v0.3.6

k apply -f ./namespaces/
#k delete -f ./namespaces/

k apply -f ./deployments/
#k delete -f ./deployments/

k apply -f ./services/
#k delete -f ./services/

k apply -f ./ingress/frontend-ingress.yaml
#k delete -f ./ingress/frontend-ingress.yaml

k apply -f ./general/helloworld-app-v2.yaml
#k delete -f ./general/helloworld-app-v2.yaml

k apply -f ./general/ingress/helloworld-app-v2-ingress.yaml
#k delete -f ./general/ingress/helloworld-app-v2-ingress.yaml


====================================================================================================

Traffic Director
====================
ZONE="asia-southeast1-a"
NEWORK="spoke-vpc"
SUBNEWORK="gke-cluster-subnet"

gcloud services enable trafficdirector.googleapis.com
gcloud services enable dns.googleapis.com

gcloud container clusters create traffic-director-cluster \
  --zone=$ZONE \
  --num-nodes=3 \
  --scopes=https://www.googleapis.com/auth/cloud-platform \
  --enable-ip-alias --workload-pool=$PROJECT_SPOKE.svc.id.goog \
  # --cluster-version=1.24.2-gke.1900

# gcloud container clusters delete traffic-director-cluster --zone=$ZONE
# gcloud container clusters resize traffic-director-cluster --zone=$ZONE --num-nodes=3
gcloud container clusters get-credentials traffic-director-cluster --zone $ZONE
gcloud container clusters list

Workload Identity for New cluster
========================================
gcloud container clusters update traffic-director-cluster \
    --zone=asia-southeast1-a \
    --workload-pool=$PROJECT_SPOKE.svc.id.goog

gcloud container node-pools update default-pool \
    --cluster=traffic-director-cluster \
    --workload-metadata=GKE_METADATA --zone=asia-southeast1-a

kubectl create serviceaccount gke-identity-sa

gcloud projects add-iam-policy-binding $PROJECT_SPOKE \
    --member="serviceAccount:$GSA_SPOKE" \
    --role="roles/trafficdirector.client"

gcloud iam service-accounts add-iam-policy-binding $GSA_SPOKE \
    --role=roles/iam.workloadIdentityUser \
    --member="serviceAccount:$PROJECT_SPOKE.svc.id.goog[default/gke-identity-sa]"

kubectl annotate serviceaccount gke-identity-sa \
    --namespace default \
    iam.gke.io/gcp-service-account=$GSA_SPOKE

curl -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/email
wget --header="Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/email

========================================

curl -o ./td-sidecar-injector-xdsv3.tgz  https://storage.googleapis.com/traffic-director/td-sidecar-injector-xdsv3.tgz
tar -xzvf td-sidecar-injector-xdsv3.tgz
cd td-sidecar-injector-xdsv3

openssl genrsa -out ../key.pem 2048
openssl req -new -key ../key.pem -out ../td-cert.csr -config ../td-ossl-conf.txt
openssl x509 -req -signkey ../key.pem -in ../td-cert.csr -out ../cert.pem -extfile ../td-ossl-conf.txt \
-extensions extension_requirements -days 360
cp ../cert.pem ../ca-cert.pem

/*
CN=istio-sidecar-injector.istio-control.svc
openssl req \
  -x509 \
  -newkey rsa:4096 \
  -keyout key.pem \
  -out cert.pem \
  -days 365 \
  -nodes \
  -subj "/CN=${CN}"
# -addext "subjectAltName=DNS:${CN}"
# cp cert.pem ca-cert.pem
*/

vi specs/01-configmap.yaml
kubectl apply -f specs/00-namespaces.yaml
# kubectl delete -f specs/00-namespaces.yaml

kubectl create secret generic istio-sidecar-injector -n istio-control \
  --from-file="../cert.pem" --from-file="../key.pem" --from-file="../ca-cert.pem"
# kubectl delete secret istio-sidecar-injector -n istio-control

CA_BUNDLE=$(cat "cert.pem" | base64 | tr -d '\n')
sed -i "s/caBundle:.*/caBundle:\ ${CA_BUNDLE}/g" specs/02-injector.yaml

kubectl apply -f specs/
# kubectl delete -f specs/

kubectl get pods -A -w | grep sidecar-injector

kubectl label namespace default istio-injection=enabled
# kubectl label namespace default istio-injection-
kubectl get namespace -L istio-injection

kubectl apply -f ./demo/client_sample.yaml
# kubectl delete -f ./demo/client_sample.yaml

curl -o ./trafficdirector_service_sample.yaml https://storage.googleapis.com/traffic-director/demo/trafficdirector_service_sample.yaml
kubectl apply -f ./demo/trafficdirector_service_sample.yaml
# kubectl delete -f ./demo/trafficdirector_service_sample.yaml

gcloud compute network-endpoint-groups list
# gcloud compute network-endpoint-groups delete service-test-neg --zone=asia-southeast1-a

gcloud compute health-checks create http td-gke-health-check --use-serving-port
# gcloud compute health-checks delete td-gke-health-check 
gcloud compute firewall-rules create fw-allow-health-checks \
  --action ALLOW \
  --direction INGRESS \
  --source-ranges 35.191.0.0/16,130.211.0.0/22 \
  --rules tcp
# gcloud compute firewall-rules delete fw-allow-health-checks

gcloud compute backend-services create td-gke-service \
 --global \
 --health-checks td-gke-health-check \
 --load-balancing-scheme=INTERNAL_SELF_MANAGED
# gcloud compute backend-services delete td-gke-service --global

gcloud compute backend-services add-backend td-gke-service \
 --global \
 --network-endpoint-group=service-test-neg \
 --network-endpoint-group-zone=asia-southeast1-a \
 --balancing-mode=RATE \
 --max-rate-per-endpoint 5

gcloud compute url-maps create td-gke-url-map --default-service td-gke-service
# gcloud compute url-maps delete td-gke-url-map

gcloud compute url-maps add-path-matcher td-gke-url-map --default-service td-gke-service \
--path-matcher-name td-gke-path-matcher

gcloud compute url-maps add-host-rule td-gke-url-map --hosts service-test \
--path-matcher-name td-gke-path-matcher

gcloud compute target-http-proxies create td-gke-proxy --url-map td-gke-url-map
# gcloud compute target-http-proxies delete td-gke-proxy

gcloud compute forwarding-rules create td-gke-forwarding-rule \
  --global \
  --load-balancing-scheme=INTERNAL_SELF_MANAGED \
  --address=0.0.0.0 \
  --target-http-proxy=td-gke-proxy \
  --ports 80 --network=default
# gcloud compute forwarding-rules delete td-gke-forwarding-rule --global

BUSYBOX_POD=$(kubectl get po -l run=client -o=jsonpath='{.items[0].metadata.name}')

# Command to execute that tests connectivity to the service service-test at
# the VIP 10.0.0.1. Because 0.0.0.0 is configured in the forwarding rule, this
# can be any VIP.
TEST_CMD="wget -q -O - 10.0.0.1; echo"

# Execute the test command on the pod.
kubectl exec -it $BUSYBOX_POD -c busybox -- /bin/sh -c "$TEST_CMD"

gcloud compute --project $PROJECT_SPOKE instances get-guest-attributes gke-traffic-director-clu-default-pool-c7175283-5o7i \
  --zone=asia-southeast1-a --query-path=td-gke-proxy/proxy-version
================================================================================

Traffic Director for VMs
========================================
gcloud services enable osconfig.googleapis.com

gcloud compute instance-templates create td-demo-hello-world-template \
  --machine-type=n1-standard-1 \
  --boot-disk-size=20GB \
  --image-family=debian-10  \
  --image-project=debian-cloud \
  --scopes=https://www.googleapis.com/auth/cloud-platform \
  --tags=td-http-server \
  --service-proxy=enabled \
  --metadata=startup-script="#! /bin/bash
sudo apt-get update -y
sudo apt-get install apache2 -y
sudo service apache2 restart
sudo mkdir -p /var/www/html/
echo '<!doctype html><html><body><h1>'\`/bin/hostname\`'</h1></body></html>' | sudo tee /var/www/html/index.html"
# gcloud compute instance-templates delete td-demo-hello-world-template

 gcloud compute instance-groups managed create td-demo-hello-world-mig \
  --zone us-central1-a \
  --size=2 \
  --template=td-demo-hello-world-template
# gcloud compute instance-groups managed delete td-demo-hello-world-mig --zone us-central1-a

gcloud compute health-checks create http td-vm-health-check
# gcloud compute health-checks delete http td-vm-health-check

gcloud compute firewall-rules create fw-allow-health-checks \
  --action ALLOW \
  --direction INGRESS \
  --source-ranges 35.191.0.0/16,130.211.0.0/22 \
  --target-tags td-http-server \
  --rules tcp:80

gcloud compute backend-services create td-vm-service \
 --global \
 --load-balancing-scheme=INTERNAL_SELF_MANAGED \
 --connection-draining-timeout=30s \
 --health-checks td-vm-health-check
# gcloud compute backend-services delete td-vm-service --global

gcloud compute backend-services add-backend td-vm-service \
  --instance-group td-demo-hello-world-mig \
  --instance-group-zone us-central1-a \
  --global

gcloud compute url-maps create td-vm-url-map --default-service td-vm-service
# gcloud compute url-maps delete td-vm-url-map

gcloud compute url-maps add-path-matcher td-vm-url-map \
   --default-service td-vm-service \
   --path-matcher-name td-vm-path-matcher
gcloud compute url-maps add-host-rule td-vm-url-map \
   --path-matcher-name=td-vm-path-matcher \
   --hosts=hello-world

gcloud compute target-http-proxies create td-vm-proxy --url-map=td-vm-url-map
# gcloud compute target-http-proxies delete td-vm-proxy

gcloud compute forwarding-rules create td-vm-forwarding-rule \
   --global \
   --load-balancing-scheme=INTERNAL_SELF_MANAGED \
   --address=10.0.0.1 \
   --target-http-proxy=td-vm-proxy \
   --ports=80 \
   --network=default
# gcloud compute forwarding-rules delete td-vm-forwarding-rule --global
curl -H "Host: hello-world" http://10.0.0.1/
========================================================================================================================

Workload Identity for Existing cluster
========================================
gcloud container clusters update gke-private-cluster \
    --region=asia-southeast1 \
    --workload-pool=$PROJECT_SPOKE.svc.id.goog

gcloud container node-pools update default-pool \
    --cluster=gke-private-cluster \
    --workload-metadata=GKE_METADATA --region=asia-southeast1 

kubectl create serviceaccount gke-identity-sa

gcloud projects add-iam-policy-binding $PROJECT_SPOKE \
    --member="serviceAccount:$GSA_SPOKE" \
    --role="roles/trafficdirector.client"

gcloud iam service-accounts add-iam-policy-binding $GSA_SPOKE \
    --role=roles/iam.workloadIdentityUser \
    --member="serviceAccount:$PROJECT_SPOKE.svc.id.goog[default/gke-identity-sa]"

kubectl annotate serviceaccount gke-identity-sa \
    --namespace default \
    iam.gke.io/gcp-service-account=$GSA_SPOKE

curl -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/email
wget --header="Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/email
============================================================================================================================

Artifact Registry
==========================================================================================
gcloud services enable artifactregistry.googleapis.com
gcloud artifacts repositories create cloud-native-repo --location=asia-southeast1 --repository-format=docker
gcloud artifacts repositories list

gcloud auth configure-docker asia-southeast1-docker.pkg.dev

docker pull us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0
docker tag us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0 asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/hello-app:v1.0
docker push asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/hello-app:v1.0

docker pull --platform=linux/amd64 nginx:latest
docker tag nginx:latest asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/nginx-app:v1.0
docker push asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/nginx-app:v1.0

docker build -t asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/ratings-api:v1.0.0 .
docker push asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/ratings-api:v1.0.0

docker build -t asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/ratings-web:v1.0.0 .
docker push asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/ratings-web:v1.0.0

# gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://asia-southeast1-docker.pkg.dev

gcloud artifacts docker images list asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo
# gcloud artifacts docker images delete asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/hello-app
# gcloud artifacts docker images delete asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/nginx-app
# gcloud artifacts docker images delete asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/ratings-web
# gcloud artifacts docker images delete asia-southeast1-docker.pkg.dev/$PROJECT_SPOKE/cloud-native-repo/ratings-api

Keycloak
=============================================
docker run -d -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:19.0.2 start-dev

==================================================================================================
==================================================================================================